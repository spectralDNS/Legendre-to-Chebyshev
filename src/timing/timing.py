import subprocess
import re
import numpy as np
import matplotlib.pyplot as plt

s = 64
repeat = 10000
number = "([0-9]+.[0-9]+e[+-][0-9]+)"
integer = "([0-9]+)"
ini = "Initialization "+number
f = "Timing N +" + integer + " avg / min = " + number + " / " + number + " flops = " + integer
time = []

#for n in range(0, 8):
#    N = s * 2**(n+2)
#    ss = 32 if n == 0 else 64
#    print(n, N, ss)
#    h = subprocess.check_output(f"l2c -N{N} -d0 -t1 -s{ss} -r{repeat} -v2", shell=True)
#    g = re.search(f, h.decode())
#    t = g.groups()
#    g1 = re.search(ini, h.decode())
#    time.append([int(t[0]), float(t[1]), float(t[3]), float(g1.groups()[0])])

time = np.array(time)

TH = np.array([
    [256, 0.000024, 0.000027],
    [512, 0.000067, 0.000071],
    [1024, 0.000227, 0.000189],
    [2*1024, 0.000734, 0.001060],
    [4*1024, 0.002371, 0.002079],
    [8*1024, 0.005824, 0.005787],
    [16*1024, 0.014384, 0.014432],
    [32*1024, 0.033771, 0.033709],
    [64*1024, 0.076597, 0.080024],
    [128*1024, 0.175661, 0.176808]])

TH_saga = np.array([
  [256, 0.000041],
  [512, 0.000161],
  [1024, 0.000559],
  [2048, 0.001605],
  [4*1024, 0.004514],
  [8*1024, 0.011905],
  [16*1024, 0.031541],
  [32*1024, 0.072413],
  [64*1024, 0.165085],
  [128*1024, 0.367546]])

time = np.array(
    [[256, 4.0000e-06, 0, 0],
     [512, 1.1000e-05, 0, 0],
     [1024, 2.4000e-05, 0, 0],
     [2048, 5.2000e-05, 0, 0],
     [4096, 1.0900e-04, 0, 0],
     [8192, 2.2300e-04, 0, 0],
     [16384, 4.5700e-04, 0, 0],
     [32768, 9.2700e-04, 0, 0],
     [65536, 1.8160e-03, 0, 0],
     [131072, 3.8420e-03, 0, 0],
     [262144, 8.3180e-03, 0, 0],
     [524288, 1.8868e-02, 0, 0],
     [1048576, 4.0105e-02, 0, 0],
     [2097152, 8.2810e-02, 0, 0],
     [4194304, 1.6660e-01, 0, 0],
     [8388608, 3.2341e-01, 0, 0]])

time_saga = np.array([
    [256, 8.0000e-06],
    [512, 2.6000e-05],
    [1024, 5.8000e-05],
    [2048, 1.2800e-04],
    [4096, 2.7000e-04],
    [8192, 5.6600e-04],
    [16384, 1.2000e-03],
    [32768, 2.3280e-03],
    [65536, 4.7090e-03],
    [131072, 9.2400e-03],
    [262144, 1.9577e-02],
    [524288, 3.9335e-02],
    [1048576, 8.0556e-02],
    [2097152, 1.6357e-01],
    [4194304, 3.2827e-01],
    [8388608, 6.7243e-01],
])

dct = np.array([
    [256, 1.167000e-06],
    [512, 2.067000e-06],
    [1024, 4.120000e-06],
    [2048, 8.452000e-06],
    [4096, 1.798300e-05],
    [8192, 4.244600e-05],
    [16384, 1.043920e-04],
    [32768, 2.029750e-04],
    [65536, 4.585910e-04],
    [131072, 1.080215e-03],
    [262144, 2.330883e-03],
    [524288, 5.372801e-03],
    [1048576, 1.197100e-02],
    [2097152, 2.937000e-02],
    [4194304, 6.572400e-02],
    [8388608, 1.421990e-01]
])

#time = np.array([
#       [2.56000000e+02, 5.00000000e-06, 4.42080000e+04, 2.23400000e-03],
#       [5.12000000e+02, 1.10000000e-05, 1.45968000e+05, 2.32400000e-03],
#       [1.02400000e+03, 2.87300000e-05, 3.45960000e+05, 2.20500000e-03],
#       [2.04800000e+03, 6.09250000e-05, 7.53072000e+05, 2.18300000e-03],
#       [4.09600000e+03, 1.31130000e-04, 1.57442400e+06, 2.70300000e-03],
#       [8.19200000e+03, 2.45300000e-04, 3.22425600e+06, 3.49700000e-03],
#       [1.63840000e+04, 4.76980000e-04, 6.53104800e+06, 5.27200000e-03],
#       [3.27680000e+04, 9.32630000e-04, 1.31517600e+07, 7.75700000e-03],
#       [6.55360000e+04, 1.90360000e-03, 2.64003120e+07, 1.43730000e-02],
#       [1.31072000e+05, 3.92720000e-03, 5.29045440e+07, 2.66800000e-02],
#       [2.62144000e+05, 9.75270000e-03, 1.05920136e+08, 5.29530000e-02],
#       [5.24288000e+05, 2.05210000e-02, 2.11958448e+08, 1.03670000e-01],
#       [1.04857600e+06, 4.34970000e-02, 4.24042200e+08, 2.36970000e-01],
#       [2.09715200e+06, 8.97290000e-02, 8.48216832e+08, 4.05590000e-01],
#       [4.19430400e+06, 1.80570000e-01, 1.69657322e+09, 7.78050000e-01],
#       [8.38860800e+06, 3.60450000e-01, 3.39329314e+09, 1.75900000e+00]])

#time = np.array([[1.02400000e+03, 2.78050000e-05, 6.84648000e+05, 2.00700000e-03],
#       [2.04800000e+03, 6.59600000e-05, 1.47883200e+06, 2.30700000e-03],
#       [4.09600000e+03, 1.30970000e-04, 3.07432800e+06, 2.67300000e-03],
#       [8.19200000e+03, 2.46030000e-04, 6.27244800e+06, 3.54800000e-03],
#       [1.63840000e+04, 4.73220000e-04, 1.26758160e+07, 4.87400000e-03],
#       [3.27680000e+04, 9.49130000e-04, 2.54896800e+07, 7.92600000e-03],
#       [6.55360000e+04, 1.90810000e-03, 5.11245360e+07, 1.55140000e-02],
#       [1.31072000e+05, 3.95860000e-03, 1.02401376e+08, 3.06690000e-02],
#       [2.62144000e+05, 1.01220000e-02, 2.04962184e+08, 5.73980000e-02],
#       [5.24288000e+05, 2.13670000e-02, 4.10090928e+08, 1.08470000e-01],
#       [1.04857600e+06, 4.46530000e-02, 8.20355544e+08, 2.11830000e-01],
#       [2.09715200e+06, 9.00800000e-02, 1.64089190e+09, 4.14580000e-01],
#       [4.19430400e+06, 1.81870000e-01, 3.28197175e+09, 8.53660000e-01],
#       [8.38860800e+06, 3.64010000e-01, 6.56413858e+09, 1.68400000e+00]])

plt.loglog(
           time[:, 0], time[:, 1], 'b',
           time[:, 0], time_saga[:, 1], 'b:',
           #time[:, 0], time2[:, 1], 'r',
           TH[:, 0], TH[:, 1], 'r',
           TH[:, 0], TH_saga[:, 1], 'r:',
           #TH[:, 0], TH[:, 2], 'm',
           time[:, 0], time[:, 0]*time[3, 1]/time[3, 0], 'k',
           TH[:, 0], np.log(TH[:, 0])**2*TH[:, 0]*1e-8, 'k--',
           time[:, 0], time[:, 3], 'k:',
           dct[:, 0], dct[:, 1], 'g')
plt.xlabel('N')
plt.ylabel('Execution time [s]')
plt.legend(['FMM-OSX', 'FMM-Intel', 'TH-OSX', 'TH-Intel', '$\mathcal{O}(N)$', '$\mathcal{O}(N \log^2 N)$', 'Plan FMM', 'DCT-OSX'])
plt.savefig('speed.png')
plt.show()
